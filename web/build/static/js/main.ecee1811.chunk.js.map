{"version":3,"sources":["logTable.js","filter.js","App.js","index.js"],"names":["UList","styled","ul","ListItem","li","LogTable","props","state","logs","newLogs","this","setState","class","map","log","src","React","Component","Label","label","Input","input","FilterBar","div","Button","button","MoreFilter","JSONTextArea","textarea","Filter","filtercb","isOpen","jsonFilter","clickEvent","bind","jsonTransformationChange","event","value","currentTarget","type","onChange","stringFilterChange","onClick","jsonFilterChange","rows","cols","AppContainer","App","port","startLogListener","shownLogs","filter","string","object","processLogs","length","JSON","stringify","indexOf","template","Function","err","console","error","socket","socketIOClient","context","on","msg","msgJSON","parse","push","filterCallback","process","fetch","then","res","json","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ecee1811.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactJSON from 'react-json-view'\nimport styled from \"styled-components\";\n\nconst UList = styled.ul`\n  list-style-type: none;\n`;\n\nconst ListItem = styled.li`\n  padding-top: 10px;\n`;\n\nclass LogTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      logs: props.logs\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    const newLogs = props.logs;\n    this.setState((state) => {\n      this.state.logs = newLogs;\n      return this.state;\n    });\n  }\n\n  render() {\n    return (\n      <UList class=\"nonBulletList\">\n        {this.state.logs.map(log => \n          <ListItem><ReactJSON src={log}/></ListItem>\n        )}\n      </UList>\n    );\n  }\n}\n\nexport default LogTable;","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Label = styled.label`\n  margin: 10px;\n`;\n\nconst Input = styled.input`\n  margin: 0 10px\n`;\n\nconst FilterBar = styled.div`\n  padding: 8px;\n  background-color: black;\n  color: white;\n`;\n\nconst Button = styled.button`\n  margin: 0 10px;\n  border: none;\n  background-color: lightgray;\n  font-size: 15px;\n`;\n\nconst MoreFilter = styled.div`\n  margin: 20px 0;\n`;\n\nconst JSONTextArea = styled.textarea`\n  margin: 10px;\n  font-size: 20px;\n`;\n\nclass Filter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.filtercb = props.filtercb\n    this.state = {\n      isOpen: false,\n      jsonFilter: \"\"\n    }\n\n    this.clickEvent = this.clickEvent.bind(this);\n    this.jsonTransformationChange = this.jsonTransformationChange.bind(this);\n  }\n\n  stringFilterChange (event) {\n    const value = event.currentTarget.value;\n    this.filtercb({type: \"string\", value});\n  }\n\n  jsonFilterChange(event) {\n    this.setState({\n      jsonFilter: event.currentTarget.value\n    });\n  }\n\n  clickEvent () {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  jsonTransformationChange() {\n    this.filtercb({type: \"object\", value: this.state.jsonFilter});\n  }\n\n  render() {\n    return (\n      <FilterBar>\n        <Label>Filter:</Label>\n        <Input onChange={this.stringFilterChange.bind(this)}/>\n        <Button onClick={this.clickEvent}>More</Button>\n        {this.state.isOpen && <MoreFilter>\n          <div>\n            <Label>\n            Log transformation:\n            </Label>\n            <br/>\n            <JSONTextArea value={this.state.jsonFilter} onChange={this.jsonFilterChange.bind(this)} rows=\"10\" cols=\"30\"/>\n            <Button onClick={this.jsonTransformationChange}>Apply</Button>\n          </div>\n        </MoreFilter>}\n      </FilterBar>\n    );\n  }\n}\n\nexport default Filter;","import React from \"react\";\nimport LogTable from \"./logTable\";\nimport Filter from \"./filter\";\nimport socketIOClient from \"socket.io-client\";\nimport styled from \"styled-components\";\n\nconst AppContainer = styled.div`\n  text-align: left;\n  font-size: 15px;\n`;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.port = props.port;\n\n    this.startLogListener();\n\n    this.state = {\n      logs: [],\n      shownLogs: [],\n      filter: {\n        string: \"\",\n        object: \"\"\n      }\n    };\n  }\n\n  filterCallback (filter) {\n    this.setState(state => {\n      this.state.filter[filter.type] = filter.value;\n      this.state.shownLogs = this.processLogs({logs: this.state.logs, filter: this.state.filter});\n      return state;\n    });\n  }\n\n  processLogs ({logs, filter}) {\n    let newLogs = logs;\n    if(filter.string.length > 0) {\n      newLogs = logs.filter(log => {\n        return JSON.stringify(log).indexOf(filter.string) > -1;\n      });\n    }\n    if (filter.object.length > 0) {\n      try {\n        const template = new Function(\"log\", `return ${filter.object}`);\n        newLogs = newLogs.map(log => {\n          let pLog = log;\n          try {\n            pLog = template(log);\n            return pLog;\n          } catch(err) {\n            console.error(\"The transsformation function is invalid\");\n            console.error({err});\n            return log;\n          }\n        });\n      } catch(err) {}\n    }\n    return newLogs;\n  }\n\n  startLogListener () {\n    const socket = socketIOClient(`http://localhost:${this.port}`);\n    const context = this;\n    socket.on(\"log\", (msg) => {\n      try {\n        const msgJSON = JSON.parse(msg);\n        context.state.logs.push(msgJSON);\n        this.setState({\n          shownLogs: context.processLogs({\n            logs: context.state.logs, \n            filter: context.state.filter})\n        });\n      } catch(err) {\n        console.error(\"Invalid JSON\");\n      }\n    });\n  }\n\n  render() {\n    return (\n      <AppContainer>\n        <Filter filtercb={this.filterCallback.bind(this)}/>\n        <LogTable logs={this.state.shownLogs}/>\n      </AppContainer>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconsole.log(process.env);\n\nfetch(\"/port\")\n\t.then(res => res.json())\n\t.then(data => {\n\t\tReactDOM.render(<App port={data.port}/>, document.getElementById('root'));\n\t});\n\n"],"sourceRoot":""}